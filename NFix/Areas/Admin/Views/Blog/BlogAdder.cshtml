@model DataLayer.ViewModel.BlogViewModel
@{
    ViewBag.Title = "BlogAdder";
    Layout = "~/Areas/Admin/Views/Shared/_Layout.cshtml";
}

<!-- #region Card -->

<style>
    table tbody tr:nth-child(odd), table tbody tr:nth-child(even) {
        background: #fff !important;
        color: #000 !important;
    }

    .cke_dialog ::-webkit-scrollbar-track {
        background: #fff !important;
    }
</style>


@using (Html.BeginForm("BlogAdder", "Blog", FormMethod.Post, new { enctype = "multipart/form-data" }))
{

    @Html.AntiForgeryToken()

    <div class="mat uk-margin-large-top uk-padding-small column clipped">
        <h4 class="uk-margin-remove-bottom">
            وبلاگ جدید
        </h4>
        <label for="Title" class="uk-margin-small-bottom uk-margin-top">
            تیتر وبلاگ
        </label>
        @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "uk-input uk-width-2-3   uk-margin-auto-left", required= "required" } })
        @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
        <label for="Title" class="uk-margin-small-bottom uk-margin-top">
            کلمات کلیدی
        </label>
        @Html.EditorFor(model => model.Keywords, new { htmlAttributes = new { @class = "uk-input uk-width-2-3   uk-margin-auto-left ", placeholder = "کلمات کلیدی را با ، جدا کنید", required = "required" } })
        @Html.ValidationMessageFor(model => model.Keywords, "", new { @class = "text-danger" })
        <label for="Description" class="uk-margin-small-bottom uk-margin-top">
            توضیح مختصر
        </label>
        @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control ", required = "required" } })
        @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
        <label for="Body" class="uk-margin-small-bottom uk-margin-top">
            محتوای وبلاگ
        </label>
        @* CK Editor *@

        @Html.EditorFor(model => model.Body, new { htmlAttributes = new { @class = "form-control ", required = "required" } })
        @Html.ValidationMessageFor(model => model.Body, "", new { @class = "text-danger" })


        <!-- #region Upload Image -->
        <label class="uk-margin-small-bottom uk-margin-top">
            عکس
        </label>
        <div class="uk-placeholder uk-margin-remove-top uk-text-center" dir="rtl">
            <span uk-icon="icon: cloud-upload"></span>
            <span class="uk-text-middle"> عکس خود را اینجا بیاندازید و یا</span>
            <div uk-form-custom>
                <input type="file" name="MainImage" multiple required>
                <span class="uk-link">انتخاب کتید</span>
            </div>
        </div>

        <!-- #endregion -->



        <progress id="js-progressbar" class="uk-progress" value="0" max="100" hidden></progress>
        <button type="submit" class="see uk-margin-medium-top uk-margin-auto-left">ذخیره</button>
    </div>
}

<div class="space"></div>

<!-- #endregion -->
<script src="~/Scripts/ckeditor/ckeditor.js"></script>
<script src="~/Scripts/ckeditor/adapters/jquery.js"></script>




<script>
    $('#Body').ckeditor();
        var bar = document.getElementById('js-progressbar');

        UIkit.upload('.js-upload', {

            //------------------------------------------------------ {{ U R L }}
            url: '',
            multiple: false,

            beforeSend: function () {
                console.log('beforeSend', arguments);
                alert('قبل از شروع آپلود');
            },
            beforeAll: function () {
                console.log('beforeAll', arguments);
            },
            load: function () {
                console.log('load', arguments);
            },
            error: function () {
                console.log('error', arguments);
            },
            complete: function () {
                console.log('complete', arguments);
            },

            loadStart: function (e) {
                console.log('loadStart', arguments);

                bar.removeAttribute('hidden');
                bar.max = e.total;
                bar.value = e.loaded;
            },

            progress: function (e) {
                console.log('progress', arguments);

                bar.max = e.total;
                bar.value = e.loaded;
            },

            loadEnd: function (e) {
                console.log('loadEnd', arguments);

                bar.max = e.total;
                bar.value = e.loaded;
            },

            completeAll: function () {
                console.log('completeAll', arguments);

                setTimeout(function () {
                    bar.setAttribute('hidden', 'hidden');
                }, 1000);

                alert('آپلود شد');
            }

        });
</script>


